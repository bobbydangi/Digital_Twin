# -*- coding: utf-8 -*-
"""Digital_twin.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iNDXC5N_uPcCVq5HOt5HtaG6WYNhOklM
"""

# %% [markdown]
# # Patient Health Digital Twin
# **Simulate vital signs + Detect anomalies + Visualize results**
# *By [Hrithik Dangi]*


# %% [markdown]
# ## 1. Setup & Installations
# Install required libraries

# %%
!pip install pandas numpy scikit-learn matplotlib --quiet

# %% [markdown]
# ## 2. Data Simulation
# Generate realistic patient vital signs data

# %%
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

def simulate_patient_data(hours=48):
    """Generate synthetic patient data with occasional anomalies"""
    base_time = datetime(2024, 1, 1)
    timestamps = [base_time + timedelta(hours=h) for h in range(hours)]

    # Simulate normal heart rate (60-100 bpm)
    heart_rate = np.random.normal(80, 10, hours).astype(int)

    # Add 3 anomalies (extreme values)
    anomaly_indices = np.random.choice(hours, 3, replace=False)
    heart_rate[anomaly_indices] = np.random.randint(40, 160, 3)

    # Simulate temperature (97°F-100°F)
    temperature = np.random.normal(98.6, 0.5, hours)

    return pd.DataFrame({
        'timestamp': timestamps,
        'heart_rate': np.clip(heart_rate, 40, 160),
        'temperature': np.round(np.clip(temperature, 97.0, 100.0), 1)
    })

# Generate 48 hours of data
df = simulate_patient_data(48)
df.head()

# %% [markdown]
# ## 3. Anomaly Detection
# Use Isolation Forest to detect abnormal readings

# %%
from sklearn.ensemble import IsolationForest

# Prepare data for model
X = df[['heart_rate', 'temperature']].copy()

# Train model (contamination=5% expected anomalies)
model = IsolationForest(contamination=0.05, random_state=42)
df['anomaly_score'] = model.fit_predict(X)
df['is_anomaly'] = np.where(df['anomaly_score'] == -1, 1, 0)

print(f"Detected {df['is_anomaly'].sum()} anomalies:")
df[df['is_anomaly'] == 1].head()

# %% [markdown]
# ## 4. Visualization
# Create interactive plots of vital signs with anomalies highlighted

# %%
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

plt.style.use('ggplot')
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))

# Heart Rate Plot
ax1.plot(df['timestamp'], df['heart_rate'], label='Heart Rate (bpm)', color='#1f77b4')
ax1.scatter(df[df['is_anomaly'] == 1]['timestamp'],
            df[df['is_anomaly'] == 1]['heart_rate'],
            color='red', label='Anomaly')
ax1.set_ylabel('Heart Rate (bpm)')
ax1.set_title('Patient Vital Signs Monitoring')
ax1.legend()

# Temperature Plot
ax2.plot(df['timestamp'], df['temperature'], label='Temperature (°F)', color='#2ca02c')
ax2.scatter(df[df['is_anomaly'] == 1]['timestamp'],
            df[df['is_anomaly'] == 1]['temperature'],
            color='red', label='Anomaly')
ax2.set_ylabel('Temperature (°F)')
ax2.set_xlabel('Time')

# Format x-axis dates
for ax in [ax1, ax2]:
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%m/%d %H:%M'))
    ax.xaxis.set_major_locator(mdates.HourLocator(interval=6))

plt.tight_layout()
plt.savefig('vital_signs_plot.png', dpi=300, bbox_inches='tight')
plt.show()

# %% [markdown]
# ## 5. Export Results
# Save data and plots for GitHub

# %%
from google.colab import files

# Save outputs
df.to_csv('patient_vitals.csv', index=False)
!mkdir -p outputs
!mv vital_signs_plot.png patient_vitals.csv outputs/

# Create ZIP archive
!zip -r digital_twin_project.zip outputs/

# Download files
files.download('digital_twin_project.zip')

# %% [markdown]
# ## 6. GitHub Integration
# **Follow these steps to upload to GitHub:**
# 1. Create new repository at https://github.com/new
# 2. Name it "digital-twin-health"
# 3. Upload these files from the ZIP archive:
#    - `patient_vitals.csv`
#    - `vital_signs_plot.png`
# 4. Add this notebook file (`File > Download .ipynb`)
# 5. Create README.md with project description

# %% [markdown]
# ## What I Learned
# - ✅ **Data Simulation**: Created realistic medical data with NumPy/Pandas
# - ✅ **Anomaly Detection**: Implemented Isolation Forest from scikit-learn
# - ✅ **Time-Series Visualization**: Made professional plots with Matplotlib
# - ✅ **GitHub Integration**: Prepared project for portfolio presentation

# %% [markdown]
# **Next Steps**
# [Add your future improvement ideas here]